name: publish_wkbparse_proj

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Rename to wkbparse-proj
        run: |
          python -c "
          import re
          with open('pyproject.toml', 'r', encoding='utf-8') as f:
            lines = f.readlines()
            in_project = False
            for i, line in enumerate(lines):
              if line.strip().startswith('[project]'):
                in_project = True
              elif in_project and line.strip().startswith('name ='):
                lines[i] = 'name = \"wkbparse-proj\"\n'
                break
          with open('pyproject.toml', 'w', encoding='utf-8') as f:
            f.writelines(lines)
          "
      - name: Install proj pre-requisities
        run: sudo apt-get update && sudo apt-get install -y sqlite3 proj-bin libproj-dev pkg-config
      - name: Build wheels for wkbparse-proj
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --strip --out dist --find-interpreter -F proj
          sccache: "true"
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Rename to wkbparse-proj
        run: |
          python -c "
          import re
          with open('pyproject.toml', 'r', encoding='utf-8') as f:
            lines = f.readlines()
            in_project = False
            for i, line in enumerate(lines):
              if line.strip().startswith('[project]'):
                in_project = True
              elif in_project and line.strip().startswith('name ='):
                lines[i] = 'name = \"wkbparse-proj\"\n'
                break
          with open('pyproject.toml', 'w', encoding='utf-8') as f:
            f.writelines(lines)
          "
      - name: Build wheels for wkbparse-proj
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --strip --out dist --find-interpreter -F proj
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
